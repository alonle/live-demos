apply plugin: 'application'

applicationName = "SuperApp"
mainClassName = "org.gradle.Person"

version = '1.0'

repositories {
    mavenCentral()
}

configurations {
    integTest.extendsFrom testRuntime
}

dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    testCompile group: 'junit', name: 'junit', version: '4.7'
    integTest "commons-io:commons-io:1.4"
}

sourceSets {
    integTest {
        java.srcDir file('src/integration-test/java')
        resources.srcDir file('src/integration-test/resources')
        compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.integTest
        runtimeClasspath = classes + compileClasspath
    }
}

task integrationTest(type: Test, dependsOn: jar) {
    testClassesDir = sourceSets.integTest.classesDir
    classpath = sourceSets.integTest.runtimeClasspath
    systemProperties['jar.path'] = jar.archivePath
}

//a task that generates the resources:
task generateMyResources {
  generatedResources = "$buildDir/generated-resources/main"
  doFirst {
    mkdir(generatedResources)
    def generated = new File(generatedResources, "myGeneratedResource.properties")
    generated.text = "message=Stay happy!"
  }
}


sourceSets {
  main {
    //let's register an output folder on the main SourceSet:
    output.dir(generateMyResources.generatedResources, buildBy: 'generateMyResources')
    //it is now a part of the 'main' classpath and will be a part of the jar
  }
}





